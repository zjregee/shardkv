// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/kv.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KvService_HandleGet_FullMethodName            = "/shardkv.KvService/HandleGet"
	KvService_HandleModify_FullMethodName         = "/shardkv.KvService/HandleModify"
	KvService_HandleTxnGet_FullMethodName         = "/shardkv.KvService/HandleTxnGet"
	KvService_HandleTxnPrewrite_FullMethodName    = "/shardkv.KvService/HandleTxnPrewrite"
	KvService_HandleTxnCommit_FullMethodName      = "/shardkv.KvService/HandleTxnCommit"
	KvService_HandleTxnRollback_FullMethodName    = "/shardkv.KvService/HandleTxnRollback"
	KvService_HandleTxnCheckStatus_FullMethodName = "/shardkv.KvService/HandleTxnCheckStatus"
	KvService_HandleConfigQuery_FullMethodName    = "/shardkv.KvService/HandleConfigQuery"
)

// KvServiceClient is the client API for KvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvServiceClient interface {
	HandleGet(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error)
	HandleModify(ctx context.Context, in *ModifyArgs, opts ...grpc.CallOption) (*ModifyReply, error)
	HandleTxnGet(ctx context.Context, in *TxnGetArgs, opts ...grpc.CallOption) (*TxnGetReply, error)
	HandleTxnPrewrite(ctx context.Context, in *TxnPrewriteArgs, opts ...grpc.CallOption) (*TxnPrewriteReply, error)
	HandleTxnCommit(ctx context.Context, in *TxnCommitArgs, opts ...grpc.CallOption) (*TxnCommitReply, error)
	HandleTxnRollback(ctx context.Context, in *TxnRollbackArgs, opts ...grpc.CallOption) (*TxnRollbackReply, error)
	HandleTxnCheckStatus(ctx context.Context, in *TxnCheckStatusArgs, opts ...grpc.CallOption) (*TxnCheckStatusReply, error)
	HandleConfigQuery(ctx context.Context, in *ConfigQueryArgs, opts ...grpc.CallOption) (*ConfigQueryReply, error)
}

type kvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKvServiceClient(cc grpc.ClientConnInterface) KvServiceClient {
	return &kvServiceClient{cc}
}

func (c *kvServiceClient) HandleGet(ctx context.Context, in *GetArgs, opts ...grpc.CallOption) (*GetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReply)
	err := c.cc.Invoke(ctx, KvService_HandleGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleModify(ctx context.Context, in *ModifyArgs, opts ...grpc.CallOption) (*ModifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyReply)
	err := c.cc.Invoke(ctx, KvService_HandleModify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleTxnGet(ctx context.Context, in *TxnGetArgs, opts ...grpc.CallOption) (*TxnGetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnGetReply)
	err := c.cc.Invoke(ctx, KvService_HandleTxnGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleTxnPrewrite(ctx context.Context, in *TxnPrewriteArgs, opts ...grpc.CallOption) (*TxnPrewriteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnPrewriteReply)
	err := c.cc.Invoke(ctx, KvService_HandleTxnPrewrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleTxnCommit(ctx context.Context, in *TxnCommitArgs, opts ...grpc.CallOption) (*TxnCommitReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnCommitReply)
	err := c.cc.Invoke(ctx, KvService_HandleTxnCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleTxnRollback(ctx context.Context, in *TxnRollbackArgs, opts ...grpc.CallOption) (*TxnRollbackReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnRollbackReply)
	err := c.cc.Invoke(ctx, KvService_HandleTxnRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleTxnCheckStatus(ctx context.Context, in *TxnCheckStatusArgs, opts ...grpc.CallOption) (*TxnCheckStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxnCheckStatusReply)
	err := c.cc.Invoke(ctx, KvService_HandleTxnCheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvServiceClient) HandleConfigQuery(ctx context.Context, in *ConfigQueryArgs, opts ...grpc.CallOption) (*ConfigQueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigQueryReply)
	err := c.cc.Invoke(ctx, KvService_HandleConfigQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServiceServer is the server API for KvService service.
// All implementations must embed UnimplementedKvServiceServer
// for forward compatibility.
type KvServiceServer interface {
	HandleGet(context.Context, *GetArgs) (*GetReply, error)
	HandleModify(context.Context, *ModifyArgs) (*ModifyReply, error)
	HandleTxnGet(context.Context, *TxnGetArgs) (*TxnGetReply, error)
	HandleTxnPrewrite(context.Context, *TxnPrewriteArgs) (*TxnPrewriteReply, error)
	HandleTxnCommit(context.Context, *TxnCommitArgs) (*TxnCommitReply, error)
	HandleTxnRollback(context.Context, *TxnRollbackArgs) (*TxnRollbackReply, error)
	HandleTxnCheckStatus(context.Context, *TxnCheckStatusArgs) (*TxnCheckStatusReply, error)
	HandleConfigQuery(context.Context, *ConfigQueryArgs) (*ConfigQueryReply, error)
	mustEmbedUnimplementedKvServiceServer()
}

// UnimplementedKvServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKvServiceServer struct{}

func (UnimplementedKvServiceServer) HandleGet(context.Context, *GetArgs) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGet not implemented")
}
func (UnimplementedKvServiceServer) HandleModify(context.Context, *ModifyArgs) (*ModifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleModify not implemented")
}
func (UnimplementedKvServiceServer) HandleTxnGet(context.Context, *TxnGetArgs) (*TxnGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxnGet not implemented")
}
func (UnimplementedKvServiceServer) HandleTxnPrewrite(context.Context, *TxnPrewriteArgs) (*TxnPrewriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxnPrewrite not implemented")
}
func (UnimplementedKvServiceServer) HandleTxnCommit(context.Context, *TxnCommitArgs) (*TxnCommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxnCommit not implemented")
}
func (UnimplementedKvServiceServer) HandleTxnRollback(context.Context, *TxnRollbackArgs) (*TxnRollbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxnRollback not implemented")
}
func (UnimplementedKvServiceServer) HandleTxnCheckStatus(context.Context, *TxnCheckStatusArgs) (*TxnCheckStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxnCheckStatus not implemented")
}
func (UnimplementedKvServiceServer) HandleConfigQuery(context.Context, *ConfigQueryArgs) (*ConfigQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleConfigQuery not implemented")
}
func (UnimplementedKvServiceServer) mustEmbedUnimplementedKvServiceServer() {}
func (UnimplementedKvServiceServer) testEmbeddedByValue()                   {}

// UnsafeKvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServiceServer will
// result in compilation errors.
type UnsafeKvServiceServer interface {
	mustEmbedUnimplementedKvServiceServer()
}

func RegisterKvServiceServer(s grpc.ServiceRegistrar, srv KvServiceServer) {
	// If the following call pancis, it indicates UnimplementedKvServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KvService_ServiceDesc, srv)
}

func _KvService_HandleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleGet(ctx, req.(*GetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleModify(ctx, req.(*ModifyArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleTxnGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnGetArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleTxnGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleTxnGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleTxnGet(ctx, req.(*TxnGetArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleTxnPrewrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnPrewriteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleTxnPrewrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleTxnPrewrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleTxnPrewrite(ctx, req.(*TxnPrewriteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleTxnCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnCommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleTxnCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleTxnCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleTxnCommit(ctx, req.(*TxnCommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleTxnRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRollbackArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleTxnRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleTxnRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleTxnRollback(ctx, req.(*TxnRollbackArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleTxnCheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnCheckStatusArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleTxnCheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleTxnCheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleTxnCheckStatus(ctx, req.(*TxnCheckStatusArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _KvService_HandleConfigQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServiceServer).HandleConfigQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KvService_HandleConfigQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServiceServer).HandleConfigQuery(ctx, req.(*ConfigQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// KvService_ServiceDesc is the grpc.ServiceDesc for KvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardkv.KvService",
	HandlerType: (*KvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleGet",
			Handler:    _KvService_HandleGet_Handler,
		},
		{
			MethodName: "HandleModify",
			Handler:    _KvService_HandleModify_Handler,
		},
		{
			MethodName: "HandleTxnGet",
			Handler:    _KvService_HandleTxnGet_Handler,
		},
		{
			MethodName: "HandleTxnPrewrite",
			Handler:    _KvService_HandleTxnPrewrite_Handler,
		},
		{
			MethodName: "HandleTxnCommit",
			Handler:    _KvService_HandleTxnCommit_Handler,
		},
		{
			MethodName: "HandleTxnRollback",
			Handler:    _KvService_HandleTxnRollback_Handler,
		},
		{
			MethodName: "HandleTxnCheckStatus",
			Handler:    _KvService_HandleTxnCheckStatus_Handler,
		},
		{
			MethodName: "HandleConfigQuery",
			Handler:    _KvService_HandleConfigQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kv.proto",
}
