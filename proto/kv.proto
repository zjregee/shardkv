syntax = "proto3";

option go_package = "github.com/zjregee/shardkv/proto";

package shardkv;

service KvService {
  rpc HandleTxnGet(TxnGetArgs) returns (TxnGetReply);
  rpc HandleTxnPrewrite(TxnPrewriteArgs) returns (TxnPrewriteReply);
  rpc HandleTxnCommit(TxnCommitArgs) returns (TxnCommitReply);
  rpc HandleTxnRollback(TxnRollbackArgs) returns (TxnRollbackReply);
  rpc HandleTxnCheckStatus(TxnCheckStatusArgs) returns (TxnCheckStatusReply);
  rpc HandleConfigQuery(ConfigQueryArgs) returns (ConfigQueryReply);
}

enum Err {
  OK             = 0;
  Duplicate      = 1;
  ErrNoKey       = 2;
  ErrConflict    = 3;
	ErrClosed      = 4;
	ErrWrongLeader = 5;
}

enum MutationKind {
  Put    = 0;
  Append = 1;
  Delete = 2;
}

enum LockStatus {
  Locked     = 0;
  Commited   = 1; 
  Rollbacked = 2;
}

message Mutation {
  MutationKind kind  = 1;
  bytes        key   = 2;
  bytes        value = 3;
}

message TxnGetArgs {
  int64  id       = 1;
  uint64 start_ts = 2;
  bytes  key      = 3;
}

message TxnGetReply {
  Err    err          = 1;
  int32  leader_index = 2;
  bytes  value        = 3;
}

message TxnPrewriteArgs {
  int64             id           = 1;
  uint64            start_ts     = 2;
  bytes             primary_lock = 3;
  repeated Mutation mutations    = 4;
}

message TxnPrewriteReply {
  Err   err          = 1;
  int32 leader_index = 2;
}

message TxnCommitArgs {
  int64          id        = 1;
  uint64         start_ts  = 2;
  uint64         commit_ts = 3;
  repeated bytes keys      = 4;
}

message TxnCommitReply {
  Err   err          = 1;
  int32 leader_index = 2;
}

message TxnRollbackArgs {
  int64          id       = 1;
  uint64         start_ts = 2;
  repeated bytes keys     = 3;
}

message TxnRollbackReply {
  Err   err          = 1;
  int32 leader_index = 2;
}

message TxnCheckStatusArgs {
  int64  id          = 1;
  uint64 start_ts    = 2;
  bytes  primary_key = 3;
}

message TxnCheckStatusReply {
  Err        err          = 1;
  int32      leader_index = 2;
  LockStatus lock_status  = 3;
}

message ConfigQueryArgs {
  int64 id = 1;
}

message ConfigQueryReply {
  Err      err          = 1;
  repeated string peers = 2;
  int32    leader_index = 3;
}
